import React, { useState, useEffect } from 'react';
import { User, Users, Settings, BookOpen, BarChart3, Eye, Edit3, Plus, Trash2, CheckCircle, AlertCircle } from 'lucide-react';

const SkillsAssessmentApp = () => {
  const [currentUser, setCurrentUser] = useState({ id: 1, name: 'John Doe', role: 'employee', managerId: 2 });
  const [activeTab, setActiveTab] = useState('assessment');
  const [employees, setEmployees] = useState([
    { id: 1, name: 'John Doe', role: 'employee', managerId: 2, department: 'Engineering' },
    { id: 2, name: 'Sarah Wilson', role: 'manager', managerId: null, department: 'Engineering' },
    { id: 3, name: 'Mike Chen', role: 'employee', managerId: 2, department: 'Engineering' },
    { id: 4, name: 'Lisa Rodriguez', role: 'admin', managerId: null, department: 'HR' }
  ]);

  const [competencies, setCompetencies] = useState([
    { id: 1, name: 'Technical Skills', description: 'Programming, system design, and technical problem-solving', category: 'Technical' },
    { id: 2, name: 'Communication', description: 'Written and verbal communication effectiveness', category: 'Soft Skills' },
    { id: 3, name: 'Leadership', description: 'Leading teams and influencing others', category: 'Leadership' },
    { id: 4, name: 'Project Management', description: 'Planning, organizing, and delivering projects', category: 'Management' },
    { id: 5, name: 'Strategic Thinking', description: 'Long-term planning and business acumen', category: 'Strategic' }
  ]);

  const [assessments, setAssessments] = useState([
    { id: 1, employeeId: 1, competencyId: 1, selfRating: 4, managerRating: 3, assessorId: 2, date: '2024-06-01' },
    { id: 2, employeeId: 1, competencyId: 2, selfRating: 3, managerRating: 4, assessorId: 2, date: '2024-06-01' },
    { id: 3, employeeId: 1, competencyId: 3, selfRating: 2, managerRating: 2, assessorId: 2, date: '2024-06-01' },
    { id: 4, employeeId: 3, competencyId: 1, selfRating: 3, managerRating: 4, assessorId: 2, date: '2024-06-05' }
  ]);

  const [learningPaths, setLearningPaths] = useState([
    { id: 1, competencyId: 1, title: 'Advanced Programming Fundamentals', provider: 'TechLearn LMS', url: 'https://lms.company.com/tech-fundamentals' },
    { id: 2, competencyId: 2, title: 'Effective Communication Workshop', provider: 'SkillBuilder', url: 'https://lms.company.com/communication' },
    { id: 3, competencyId: 3, title: 'Leadership Essentials', provider: 'LeadershipPro', url: 'https://lms.company.com/leadership' },
    { id: 4, competencyId: 4, title: 'Project Management Certification', provider: 'PMI Online', url: 'https://lms.company.com/pm-cert' }
  ]);

  const getRatingColor = (rating) => {
    if (rating >= 4) return 'text-green-600 bg-green-100';
    if (rating >= 3) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const AssessmentForm = () => {
    const [selectedEmployee, setSelectedEmployee] = useState(currentUser.id);
    const [ratings, setRatings] = useState({});

    const handleRatingChange = (competencyId, rating) => {
      setRatings(prev => ({ ...prev, [competencyId]: rating }));
    };

    const handleSubmit = () => {
      Object.entries(ratings).forEach(([competencyId, rating]) => {
        const existingAssessment = assessments.find(a => 
          a.employeeId === selectedEmployee && a.competencyId === parseInt(competencyId)
        );

        if (existingAssessment) {
          setAssessments(prev => prev.map(a => 
            a.id === existingAssessment.id 
              ? { ...a, [currentUser.role === 'manager' ? 'managerRating' : 'selfRating']: rating, date: new Date().toISOString().split('T')[0] }
              : a
          ));
        } else {
          const newAssessment = {
            id: assessments.length + 1,
            employeeId: selectedEmployee,
            competencyId: parseInt(competencyId),
            selfRating: currentUser.role === 'employee' ? rating : null,
            managerRating: currentUser.role === 'manager' ? rating : null,
            assessorId: currentUser.id,
            date: new Date().toISOString().split('T')[0]
          };
          setAssessments(prev => [...prev, newAssessment]);
        }
      });
      
      setRatings({});
      alert('Assessment submitted successfully!');
    };

    const employeesToAssess = currentUser.role === 'manager' 
      ? employees.filter(e => e.managerId === currentUser.id)
      : [currentUser];

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Skills Assessment</h2>
          
          {currentUser.role === 'manager' && (
            <div className="mb-6">
              <label className="block text-sm font-medium mb-2">Select Employee</label>
              <select 
                value={selectedEmployee} 
                onChange={(e) => setSelectedEmployee(parseInt(e.target.value))}
                className="w-full p-2 border rounded-md"
              >
                {employeesToAssess.map(emp => (
                  <option key={emp.id} value={emp.id}>{emp.name}</option>
                ))}
              </select>
            </div>
          )}

          <div className="space-y-4">
            {competencies.map(competency => (
              <div key={competency.id} className="border rounded-lg p-4">
                <h3 className="font-medium mb-2">{competency.name}</h3>
                <p className="text-sm text-gray-600 mb-3">{competency.description}</p>
                
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium">Rating:</span>
                  {[1, 2, 3, 4, 5].map(rating => (
                    <button
                      key={rating}
                      onClick={() => handleRatingChange(competency.id, rating)}
                      className={`w-8 h-8 rounded-full border-2 text-sm font-medium ${
                        ratings[competency.id] === rating
                          ? 'bg-blue-500 text-white border-blue-500'
                          : 'border-gray-300 hover:border-blue-400'
                      }`}
                    >
                      {rating}
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>

          <button
            onClick={handleSubmit}
            disabled={Object.keys(ratings).length === 0}
            className="mt-6 bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 disabled:bg-gray-300"
          >
            Submit Assessment
          </button>
        </div>
      </div>
    );
  };

  const ResultsView = () => {
    const getEmployeeAssessments = (employeeId) => {
      return assessments.filter(a => a.employeeId === employeeId);
    };

    const getCompetencyName = (competencyId) => {
      return competencies.find(c => c.id === competencyId)?.name || 'Unknown';
    };

    const getLearningPath = (competencyId) => {
      return learningPaths.find(lp => lp.competencyId === competencyId);
    };

    const employeesToShow = currentUser.role === 'admin' 
      ? employees 
      : currentUser.role === 'manager'
        ? employees.filter(e => e.managerId === currentUser.id || e.id === currentUser.id)
        : [currentUser];

    return (
      <div className="space-y-6">
        {employeesToShow.map(employee => {
          const empAssessments = getEmployeeAssessments(employee.id);
          if (empAssessments.length === 0) return null;

          return (
            <div key={employee.id} className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4">{employee.name} - Assessment Results</h3>
              
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-2">Competency</th>
                      <th className="text-center py-2">Self Rating</th>
                      <th className="text-center py-2">Manager Rating</th>
                      <th className="text-center py-2">Gap</th>
                      <th className="text-left py-2">Learning Path</th>
                    </tr>
                  </thead>
                  <tbody>
                    {empAssessments.map(assessment => {
                      const gap = assessment.managerRating && assessment.selfRating 
                        ? assessment.managerRating - assessment.selfRating 
                        : null;
                      const learningPath = getLearningPath(assessment.competencyId);
                      
                      return (
                        <tr key={assessment.id} className="border-b">
                          <td className="py-3 font-medium">{getCompetencyName(assessment.competencyId)}</td>
                          <td className="py-3 text-center">
                            {assessment.selfRating && (
                              <span className={`px-2 py-1 rounded-full text-xs ${getRatingColor(assessment.selfRating)}`}>
                                {assessment.selfRating}
                              </span>
                            )}
                          </td>
                          <td className="py-3 text-center">
                            {assessment.managerRating && (
                              <span className={`px-2 py-1 rounded-full text-xs ${getRatingColor(assessment.managerRating)}`}>
                                {assessment.managerRating}
                              </span>
                            )}
                          </td>
                          <td className="py-3 text-center">
                            {gap !== null && (
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                gap > 0 ? 'text-green-600 bg-green-100' : 
                                gap < 0 ? 'text-red-600 bg-red-100' : 
                                'text-gray-600 bg-gray-100'
                              }`}>
                                {gap > 0 ? '+' : ''}{gap}
                              </span>
                            )}
                          </td>
                          <td className="py-3">
                            {learningPath && (
                              <a
                                href={learningPath.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-500 hover:text-blue-700 text-xs flex items-center"
                              >
                                <BookOpen className="w-3 h-3 mr-1" />
                                {learningPath.title}
                              </a>
                            )}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const AdminPanel = () => {
    const [newCompetency, setNewCompetency] = useState({ name: '', description: '', category: '' });
    const [editingCompetency, setEditingCompetency] = useState(null);

    const handleAddCompetency = () => {
      if (newCompetency.name && newCompetency.description) {
        setCompetencies(prev => [...prev, { 
          id: prev.length + 1, 
          ...newCompetency 
        }]);
        setNewCompetency({ name: '', description: '', category: '' });
      }
    };

    const handleDeleteCompetency = (id) => {
      setCompetencies(prev => prev.filter(c => c.id !== id));
      setAssessments(prev => prev.filter(a => a.competencyId !== id));
    };

    const getAssessmentStats = () => {
      const totalAssessments = assessments.length;
      const avgSelfRating = assessments.reduce((sum, a) => sum + (a.selfRating || 0), 0) / totalAssessments;
      const avgManagerRating = assessments.reduce((sum, a) => sum + (a.managerRating || 0), 0) / totalAssessments;
      
      return { totalAssessments, avgSelfRating: avgSelfRating.toFixed(1), avgManagerRating: avgManagerRating.toFixed(1) };
    };

    const stats = getAssessmentStats();

    return (
      <div className="space-y-6">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Total Assessments</h3>
            <p className="text-2xl font-bold text-blue-600">{stats.totalAssessments}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Avg Self Rating</h3>
            <p className="text-2xl font-bold text-green-600">{stats.avgSelfRating}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Avg Manager Rating</h3>
            <p className="text-2xl font-bold text-purple-600">{stats.avgManagerRating}</p>
          </div>
        </div>

        {/* Competency Management */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Manage Competencies</h3>
          
          {/* Add New Competency */}
          <div className="border rounded-lg p-4 mb-4 bg-gray-50">
            <h4 className="font-medium mb-3">Add New Competency</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <input
                type="text"
                placeholder="Competency Name"
                value={newCompetency.name}
                onChange={(e) => setNewCompetency(prev => ({ ...prev, name: e.target.value }))}
                className="p-2 border rounded-md"
              />
              <input
                type="text"
                placeholder="Category"
                value={newCompetency.category}
                onChange={(e) => setNewCompetency(prev => ({ ...prev, category: e.target.value }))}
                className="p-2 border rounded-md"
              />
              <button
                onClick={handleAddCompetency}
                className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 flex items-center justify-center"
              >
                <Plus className="w-4 h-4 mr-1" />
                Add
              </button>
            </div>
            <textarea
              placeholder="Description"
              value={newCompetency.description}
              onChange={(e) => setNewCompetency(prev => ({ ...prev, description: e.target.value }))}
              className="w-full p-2 border rounded-md mt-3"
              rows="2"
            />
          </div>

          {/* Existing Competencies */}
          <div className="space-y-3">
            {competencies.map(competency => (
              <div key={competency.id} className="border rounded-lg p-3 flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium">{competency.name}</h4>
                  <p className="text-sm text-gray-600">{competency.description}</p>
                  <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">{competency.category}</span>
                </div>
                <button
                  onClick={() => handleDeleteCompetency(competency.id)}
                  className="text-red-500 hover:text-red-700 p-2"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  const navigation = [
    { id: 'assessment', label: 'Assessment', icon: Edit3, roles: ['employee', 'manager'] },
    { id: 'results', label: 'Results', icon: BarChart3, roles: ['employee', 'manager', 'admin'] },
    { id: 'admin', label: 'Admin Panel', icon: Settings, roles: ['admin'] }
  ];

  const availableNavItems = navigation.filter(item => 
    item.roles.includes(currentUser.role)
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <h1 className="text-2xl font-bold text-gray-900">Skills Assessment Platform</h1>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">Welcome, {currentUser.name}</span>
              <div className="flex space-x-2">
                <button
                  onClick={() => setCurrentUser({ id: 1, name: 'John Doe', role: 'employee', managerId: 2 })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'employee' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Employee
                </button>
                <button
                  onClick={() => setCurrentUser({ id: 2, name: 'Sarah Wilson', role: 'manager', managerId: null })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'manager' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Manager
                </button>
                <button
                  onClick={() => setCurrentUser({ id: 4, name: 'Lisa Rodriguez', role: 'admin', managerId: null })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'admin' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Admin
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <nav className="flex space-x-8 mb-8">
          {availableNavItems.map(item => {
            const Icon = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`flex items-center px-3 py-2 text-sm font-medium rounded-md ${
                  activeTab === item.id
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                }`}
              >
                <Icon className="w-4 h-4 mr-2" />
                {item.label}
              </button>
            );
          })}
        </nav>

        {/* Content */}
        {activeTab === 'assessment' && <AssessmentForm />}
        {activeTab === 'results' && <ResultsView />}
        {activeTab === 'admin' && currentUser.role === 'admin' && <AdminPanel />}
      </div>
    </div>
  );
};

export default SkillsAssessmentApp;
