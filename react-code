import React, { useState, useEffect } from 'react';
import { User, Users, Settings, BookOpen, BarChart3, Eye, Edit3, Plus, Trash2, CheckCircle, AlertCircle, TrendingUp, DollarSign, Target, Activity } from 'lucide-react';

const SkillsAssessmentApp = () => {
  const [currentUser, setCurrentUser] = useState({ id: 1, name: 'John Doe', role: 'employee', managerId: 2 });
  const [activeTab, setActiveTab] = useState('assessment');
  const [employees, setEmployees] = useState([
    { id: 1, name: 'John Doe', role: 'employee', managerId: 2, department: 'Sales', isSalesRep: true },
    { id: 2, name: 'Sarah Wilson', role: 'manager', managerId: null, department: 'Sales', isSalesRep: false },
    { id: 3, name: 'Mike Chen', role: 'employee', managerId: 2, department: 'Sales', isSalesRep: true },
    { id: 4, name: 'Lisa Rodriguez', role: 'admin', managerId: null, department: 'HR', isSalesRep: false },
    { id: 5, name: 'Alex Thompson', role: 'employee', managerId: 2, department: 'Sales', isSalesRep: true }
  ]);

  const [competencies, setCompetencies] = useState([
    { id: 1, name: 'Technical Skills', description: 'Programming, system design, and technical problem-solving', category: 'Technical' },
    { id: 2, name: 'Communication', description: 'Written and verbal communication effectiveness', category: 'Soft Skills' },
    { id: 3, name: 'Leadership', description: 'Leading teams and influencing others', category: 'Leadership' },
    { id: 4, name: 'Project Management', description: 'Planning, organizing, and delivering projects', category: 'Management' },
    { id: 5, name: 'Strategic Thinking', description: 'Long-term planning and business acumen', category: 'Strategic' },
    { id: 6, name: 'Sales Skills', description: 'Prospecting, presenting, and closing deals', category: 'Sales' },
    { id: 7, name: 'Customer Relationship Management', description: 'Building and maintaining client relationships', category: 'Sales' },
    { id: 8, name: 'Negotiation', description: 'Contract negotiation and deal structuring', category: 'Sales' }
  ]);

  const [assessments, setAssessments] = useState([
    { id: 1, employeeId: 1, competencyId: 1, selfRating: 4, managerRating: 3, assessorId: 2, date: '2024-06-01' },
    { id: 2, employeeId: 1, competencyId: 2, selfRating: 3, managerRating: 4, assessorId: 2, date: '2024-06-01' },
    { id: 3, employeeId: 1, competencyId: 3, selfRating: 2, managerRating: 2, assessorId: 2, date: '2024-06-01' },
    { id: 4, employeeId: 1, competencyId: 6, selfRating: 4, managerRating: 5, assessorId: 2, date: '2024-06-01' },
    { id: 5, employeeId: 1, competencyId: 7, selfRating: 3, managerRating: 4, assessorId: 2, date: '2024-06-01' },
    { id: 6, employeeId: 3, competencyId: 6, selfRating: 3, managerRating: 3, assessorId: 2, date: '2024-06-05' },
    { id: 7, employeeId: 3, competencyId: 7, selfRating: 2, managerRating: 3, assessorId: 2, date: '2024-06-05' },
    { id: 8, employeeId: 5, competencyId: 6, selfRating: 5, managerRating: 5, assessorId: 2, date: '2024-06-03' },
    { id: 9, employeeId: 5, competencyId: 7, selfRating: 4, managerRating: 5, assessorId: 2, date: '2024-06-03' }
  ]);

  const [learningPaths, setLearningPaths] = useState([
    { id: 1, competencyId: 1, title: 'Advanced Programming Fundamentals', provider: 'TechLearn LMS', url: 'https://lms.company.com/tech-fundamentals' },
    { id: 2, competencyId: 2, title: 'Effective Communication Workshop', provider: 'SkillBuilder', url: 'https://lms.company.com/communication' },
    { id: 3, competencyId: 3, title: 'Leadership Essentials', provider: 'LeadershipPro', url: 'https://lms.company.com/leadership' },
    { id: 4, competencyId: 4, title: 'Project Management Certification', provider: 'PMI Online', url: 'https://lms.company.com/pm-cert' },
    { id: 5, competencyId: 6, title: 'Sales Methodology Training', provider: 'SalesForce Academy', url: 'https://lms.company.com/sales-methodology' },
    { id: 6, competencyId: 7, title: 'Customer Relationship Management', provider: 'CRM Masters', url: 'https://lms.company.com/crm-training' }
  ]);

  // Sales performance data (simulating Salesforce integration)
  const [salesData, setSalesData] = useState([
    { 
      id: 1, 
      employeeId: 1, 
      quarter: 'Q1 2024', 
      quota: 250000, 
      attainment: 280000, 
      attainmentPercent: 112,
      pipelineValue: 450000,
      dealsWon: 12,
      dealsLost: 8,
      avgDealSize: 23333,
      salesCycle: 45,
      territory: 'West Coast'
    },
    { 
      id: 2, 
      employeeId: 3, 
      quarter: 'Q1 2024', 
      quota: 200000, 
      attainment: 175000, 
      attainmentPercent: 87.5,
      pipelineValue: 320000,
      dealsWon: 8,
      dealsLost: 12,
      avgDealSize: 21875,
      salesCycle: 52,
      territory: 'East Coast'
    },
    { 
      id: 3, 
      employeeId: 5, 
      quarter: 'Q1 2024', 
      quota: 300000, 
      attainment: 295000, 
      attainmentPercent: 98.3,
      pipelineValue: 580000,
      dealsWon: 15,
      dealsLost: 5,
      avgDealSize: 19667,
      salesCycle: 38,
      territory: 'Central'
    }
  ]);

  const getPerformanceColor = (attainment) => {
    if (attainment >= 100) return 'text-green-600 bg-green-100';
    if (attainment >= 80) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getRatingColor = (rating) => {
    if (rating >= 4) return 'text-green-600 bg-green-100';
    if (rating >= 3) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const AssessmentForm = () => {
    const [selectedEmployee, setSelectedEmployee] = useState(currentUser.id);
    const [ratings, setRatings] = useState({});

    const handleRatingChange = (competencyId, rating) => {
      setRatings(prev => ({ ...prev, [competencyId]: rating }));
    };

    const handleSubmit = () => {
      Object.entries(ratings).forEach(([competencyId, rating]) => {
        const existingAssessment = assessments.find(a => 
          a.employeeId === selectedEmployee && a.competencyId === parseInt(competencyId)
        );

        if (existingAssessment) {
          setAssessments(prev => prev.map(a => 
            a.id === existingAssessment.id 
              ? { ...a, [currentUser.role === 'manager' ? 'managerRating' : 'selfRating']: rating, date: new Date().toISOString().split('T')[0] }
              : a
          ));
        } else {
          const newAssessment = {
            id: assessments.length + 1,
            employeeId: selectedEmployee,
            competencyId: parseInt(competencyId),
            selfRating: currentUser.role === 'employee' ? rating : null,
            managerRating: currentUser.role === 'manager' ? rating : null,
            assessorId: currentUser.id,
            date: new Date().toISOString().split('T')[0]
          };
          setAssessments(prev => [...prev, newAssessment]);
        }
      });
      
      setRatings({});
      alert('Assessment submitted successfully!');
    };

    const employeesToAssess = currentUser.role === 'manager' 
      ? employees.filter(e => e.managerId === currentUser.id)
      : [currentUser];

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Skills Assessment</h2>
          
          {currentUser.role === 'manager' && (
            <div className="mb-6">
              <label className="block text-sm font-medium mb-2">Select Employee</label>
              <select 
                value={selectedEmployee} 
                onChange={(e) => setSelectedEmployee(parseInt(e.target.value))}
                className="w-full p-2 border rounded-md"
              >
                {employeesToAssess.map(emp => (
                  <option key={emp.id} value={emp.id}>{emp.name}</option>
                ))}
              </select>
            </div>
          )}

          <div className="space-y-4">
            {competencies.map(competency => (
              <div key={competency.id} className="border rounded-lg p-4">
                <h3 className="font-medium mb-2">{competency.name}</h3>
                <p className="text-sm text-gray-600 mb-3">{competency.description}</p>
                
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium">Rating:</span>
                  {[1, 2, 3, 4, 5].map(rating => (
                    <button
                      key={rating}
                      onClick={() => handleRatingChange(competency.id, rating)}
                      className={`w-8 h-8 rounded-full border-2 text-sm font-medium ${
                        ratings[competency.id] === rating
                          ? 'bg-blue-500 text-white border-blue-500'
                          : 'border-gray-300 hover:border-blue-400'
                      }`}
                    >
                      {rating}
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>

          <button
            onClick={handleSubmit}
            disabled={Object.keys(ratings).length === 0}
            className="mt-6 bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 disabled:bg-gray-300"
          >
            Submit Assessment
          </button>
        </div>
      </div>
    );
  };

  const ResultsView = () => {
    const getEmployeeAssessments = (employeeId) => {
      return assessments.filter(a => a.employeeId === employeeId);
    };

    const getCompetencyName = (competencyId) => {
      return competencies.find(c => c.id === competencyId)?.name || 'Unknown';
    };

    const getLearningPath = (competencyId) => {
      return learningPaths.find(lp => lp.competencyId === competencyId);
    };

    const employeesToShow = currentUser.role === 'admin' 
      ? employees 
      : currentUser.role === 'manager'
        ? employees.filter(e => e.managerId === currentUser.id || e.id === currentUser.id)
        : [currentUser];

    return (
      <div className="space-y-6">
        {employeesToShow.map(employee => {
          const empAssessments = getEmployeeAssessments(employee.id);
          if (empAssessments.length === 0) return null;

          return (
            <div key={employee.id} className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4">{employee.name} - Assessment Results</h3>
              
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-2">Competency</th>
                      <th className="text-center py-2">Self Rating</th>
                      <th className="text-center py-2">Manager Rating</th>
                      <th className="text-center py-2">Gap</th>
                      <th className="text-left py-2">Learning Path</th>
                    </tr>
                  </thead>
                  <tbody>
                    {empAssessments.map(assessment => {
                      const gap = assessment.managerRating && assessment.selfRating 
                        ? assessment.managerRating - assessment.selfRating 
                        : null;
                      const learningPath = getLearningPath(assessment.competencyId);
                      
                      return (
                        <tr key={assessment.id} className="border-b">
                          <td className="py-3 font-medium">{getCompetencyName(assessment.competencyId)}</td>
                          <td className="py-3 text-center">
                            {assessment.selfRating && (
                              <span className={`px-2 py-1 rounded-full text-xs ${getRatingColor(assessment.selfRating)}`}>
                                {assessment.selfRating}
                              </span>
                            )}
                          </td>
                          <td className="py-3 text-center">
                            {assessment.managerRating && (
                              <span className={`px-2 py-1 rounded-full text-xs ${getRatingColor(assessment.managerRating)}`}>
                                {assessment.managerRating}
                              </span>
                            )}
                          </td>
                          <td className="py-3 text-center">
                            {gap !== null && (
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                gap > 0 ? 'text-green-600 bg-green-100' : 
                                gap < 0 ? 'text-red-600 bg-red-100' : 
                                'text-gray-600 bg-gray-100'
                              }`}>
                                {gap > 0 ? '+' : ''}{gap}
                              </span>
                            )}
                          </td>
                          <td className="py-3">
                            {learningPath && (
                              <a
                                href={learningPath.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-500 hover:text-blue-700 text-xs flex items-center"
                              >
                                <BookOpen className="w-3 h-3 mr-1" />
                                {learningPath.title}
                              </a>
                            )}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const SalesPerformanceView = () => {
    const getSalesRepData = () => {
      return salesData.map(sale => {
        const employee = employees.find(e => e.id === sale.employeeId);
        const empAssessments = assessments.filter(a => a.employeeId === sale.employeeId);
        
        // Calculate average competency ratings for sales-related skills
        const salesCompetencies = [6, 7, 8]; // Sales Skills, CRM, Negotiation
        const salesRatings = empAssessments.filter(a => salesCompetencies.includes(a.competencyId));
        const avgSalesRating = salesRatings.length > 0 
          ? salesRatings.reduce((sum, a) => sum + (a.managerRating || a.selfRating || 0), 0) / salesRatings.length
          : 0;

        return {
          ...sale,
          employeeName: employee?.name || 'Unknown',
          avgSalesSkillRating: avgSalesRating.toFixed(1),
          assessments: empAssessments
        };
      });
    };

    const salesRepData = getSalesRepData();

    // Calculate correlation between skills and performance
    const getCorrelationInsight = () => {
      const validData = salesRepData.filter(rep => rep.avgSalesSkillRating > 0);
      if (validData.length < 2) return null;

      const highPerformers = validData.filter(rep => rep.attainmentPercent >= 100);
      const lowPerformers = validData.filter(rep => rep.attainmentPercent < 90);

      const avgHighPerformerSkills = highPerformers.length > 0 
        ? highPerformers.reduce((sum, rep) => sum + parseFloat(rep.avgSalesSkillRating), 0) / highPerformers.length
        : 0;
      
      const avgLowPerformerSkills = lowPerformers.length > 0
        ? lowPerformers.reduce((sum, rep) => sum + parseFloat(rep.avgSalesSkillRating), 0) / lowPerformers.length
        : 0;

      return {
        highPerformerSkills: avgHighPerformerSkills.toFixed(1),
        lowPerformerSkills: avgLowPerformerSkills.toFixed(1),
        difference: (avgHighPerformerSkills - avgLowPerformerSkills).toFixed(1)
      };
    };

    const correlation = getCorrelationInsight();

    return (
      <div className="space-y-6">
        {/* Performance Overview */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <TrendingUp className="w-5 h-5 mr-2" />
            Sales Performance & Skills Correlation
          </h2>
          
          {correlation && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <h3 className="font-medium text-blue-900 mb-2">Performance Insight</h3>
              <p className="text-sm text-blue-800">
                High performers (≥100% attainment) average <strong>{correlation.highPerformerSkills}</strong> in sales skills ratings, 
                while low performers (&lt;90% attainment) average <strong>{correlation.lowPerformerSkills}</strong> 
                - a difference of <strong>{correlation.difference}</strong> points.
              </p>
            </div>
          )}

          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3">Sales Rep</th>
                  <th className="text-left py-3">Territory</th>
                  <th className="text-center py-3">Quota Attainment</th>
                  <th className="text-center py-3">Pipeline Value</th>
                  <th className="text-center py-3">Win Rate</th>
                  <th className="text-center py-3">Avg Deal Size</th>
                  <th className="text-center py-3">Sales Cycle</th>
                  <th className="text-center py-3">Avg Sales Skills</th>
                  <th className="text-left py-3">Recommended Action</th>
                </tr>
              </thead>
              <tbody>
                {salesRepData.map(rep => {
                  const winRate = ((rep.dealsWon / (rep.dealsWon + rep.dealsLost)) * 100).toFixed(1);
                  const needsImprovement = rep.attainmentPercent < 90 || parseFloat(rep.avgSalesSkillRating) < 3;
                  
                  return (
                    <tr key={rep.id} className="border-b hover:bg-gray-50">
                      <td className="py-3 font-medium">{rep.employeeName}</td>
                      <td className="py-3">{rep.territory}</td>
                      <td className="py-3 text-center">
                        <div className="flex flex-col items-center">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPerformanceColor(rep.attainmentPercent)}`}>
                            {rep.attainmentPercent}%
                          </span>
                          <span className="text-xs text-gray-500 mt-1">
                            ${rep.attainment.toLocaleString()} / ${rep.quota.toLocaleString()}
                          </span>
                        </div>
                      </td>
                      <td className="py-3 text-center">${rep.pipelineValue.toLocaleString()}</td>
                      <td className="py-3 text-center">
                        <span className={`px-2 py-1 rounded-full text-xs ${parseFloat(winRate) >= 50 ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'}`}>
                          {winRate}%
                        </span>
                      </td>
                      <td className="py-3 text-center">${rep.avgDealSize.toLocaleString()}</td>
                      <td className="py-3 text-center">{rep.salesCycle} days</td>
                      <td className="py-3 text-center">
                        <span className={`px-2 py-1 rounded-full text-xs ${getRatingColor(parseFloat(rep.avgSalesSkillRating))}`}>
                          {rep.avgSalesSkillRating}
                        </span>
                      </td>
                      <td className="py-3">
                        {needsImprovement ? (
                          <div className="flex items-start space-x-2">
                            <AlertCircle className="w-4 h-4 text-orange-500 mt-0.5 flex-shrink-0" />
                            <div>
                              <p className="text-xs font-medium text-orange-700">Skills Development</p>
                              <p className="text-xs text-gray-600">
                                {rep.attainmentPercent < 90 && 'Performance coaching needed'}
                                {rep.attainmentPercent < 90 && parseFloat(rep.avgSalesSkillRating) < 3 && ' + '}
                                {parseFloat(rep.avgSalesSkillRating) < 3 && 'Sales skills training'}
                              </p>
                            </div>
                          </div>
                        ) : (
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="w-4 h-4 text-green-500" />
                            <span className="text-xs text-green-700">On track</span>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        {/* Detailed Skills vs Performance Analysis */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Skills vs Performance Analysis</h3>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {salesRepData.map(rep => (
              <div key={rep.id} className="border rounded-lg p-4">
                <div className="flex justify-between items-start mb-3">
                  <h4 className="font-medium">{rep.employeeName}</h4>
                  <span className={`px-2 py-1 rounded-full text-xs ${getPerformanceColor(rep.attainmentPercent)}`}>
                    {rep.attainmentPercent}% attainment
                  </span>
                </div>
                
                <div className="space-y-2 text-sm">
                  {rep.assessments.filter(a => [6, 7, 8].includes(a.competencyId)).map(assessment => {
                    const competency = competencies.find(c => c.id === assessment.competencyId);
                    return (
                      <div key={assessment.id} className="flex justify-between items-center">
                        <span className="text-gray-600">{competency?.name}</span>
                        <div className="flex space-x-2">
                          <span className="text-xs text-gray-500">Self:</span>
                          <span className={`px-1 py-0.5 rounded text-xs ${getRatingColor(assessment.selfRating)}`}>
                            {assessment.selfRating}
                          </span>
                          <span className="text-xs text-gray-500">Mgr:</span>
                          <span className={`px-1 py-0.5 rounded text-xs ${getRatingColor(assessment.managerRating)}`}>
                            {assessment.managerRating}
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>

                <div className="mt-3 pt-3 border-t">
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>Pipeline: ${rep.pipelineValue.toLocaleString()}</span>
                    <span>Win Rate: {((rep.dealsWon / (rep.dealsWon + rep.dealsLost)) * 100).toFixed(0)}%</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Salesforce Integration Info */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-2">Salesforce Integration</h4>
          <p className="text-sm text-gray-600 mb-2">
            This data is simulated but would typically sync from Salesforce using:
          </p>
          <ul className="text-xs text-gray-500 space-y-1">
            <li>• Salesforce REST API for quota attainment and pipeline data</li>
            <li>• Custom fields for skills assessment correlation</li>
            <li>• Automated data refresh every 24 hours</li>
            <li>• Territory and hierarchy mapping</li>
          </ul>
        </div>
      </div>
    );
  };

  const AdminPanel = () => {
    const [newCompetency, setNewCompetency] = useState({ name: '', description: '', category: '' });
    const [editingCompetency, setEditingCompetency] = useState(null);

    const handleAddCompetency = () => {
      if (newCompetency.name && newCompetency.description) {
        setCompetencies(prev => [...prev, { 
          id: prev.length + 1, 
          ...newCompetency 
        }]);
        setNewCompetency({ name: '', description: '', category: '' });
      }
    };

    const handleDeleteCompetency = (id) => {
      setCompetencies(prev => prev.filter(c => c.id !== id));
      setAssessments(prev => prev.filter(a => a.competencyId !== id));
    };

    const getAssessmentStats = () => {
      const totalAssessments = assessments.length;
      const avgSelfRating = assessments.reduce((sum, a) => sum + (a.selfRating || 0), 0) / totalAssessments;
      const avgManagerRating = assessments.reduce((sum, a) => sum + (a.managerRating || 0), 0) / totalAssessments;
      
      return { totalAssessments, avgSelfRating: avgSelfRating.toFixed(1), avgManagerRating: avgManagerRating.toFixed(1) };
    };

    const stats = getAssessmentStats();

    return (
      <div className="space-y-6">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Total Assessments</h3>
            <p className="text-2xl font-bold text-blue-600">{stats.totalAssessments}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Avg Self Rating</h3>
            <p className="text-2xl font-bold text-green-600">{stats.avgSelfRating}</p>
          </div>
          <div className="bg-white rounded-lg shadow p-4">
            <h3 className="text-sm font-medium text-gray-500">Avg Manager Rating</h3>
            <p className="text-2xl font-bold text-purple-600">{stats.avgManagerRating}</p>
          </div>
        </div>

        {/* Competency Management */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Manage Competencies</h3>
          
          {/* Add New Competency */}
          <div className="border rounded-lg p-4 mb-4 bg-gray-50">
            <h4 className="font-medium mb-3">Add New Competency</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <input
                type="text"
                placeholder="Competency Name"
                value={newCompetency.name}
                onChange={(e) => setNewCompetency(prev => ({ ...prev, name: e.target.value }))}
                className="p-2 border rounded-md"
              />
              <input
                type="text"
                placeholder="Category"
                value={newCompetency.category}
                onChange={(e) => setNewCompetency(prev => ({ ...prev, category: e.target.value }))}
                className="p-2 border rounded-md"
              />
              <button
                onClick={handleAddCompetency}
                className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 flex items-center justify-center"
              >
                <Plus className="w-4 h-4 mr-1" />
                Add
              </button>
            </div>
            <textarea
              placeholder="Description"
              value={newCompetency.description}
              onChange={(e) => setNewCompetency(prev => ({ ...prev, description: e.target.value }))}
              className="w-full p-2 border rounded-md mt-3"
              rows="2"
            />
          </div>

          {/* Existing Competencies */}
          <div className="space-y-3">
            {competencies.map(competency => (
              <div key={competency.id} className="border rounded-lg p-3 flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium">{competency.name}</h4>
                  <p className="text-sm text-gray-600">{competency.description}</p>
                  <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">{competency.category}</span>
                </div>
                <button
                  onClick={() => handleDeleteCompetency(competency.id)}
                  className="text-red-500 hover:text-red-700 p-2"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  const navigation = [
    { id: 'assessment', label: 'Assessment', icon: Edit3, roles: ['employee', 'manager'] },
    { id: 'results', label: 'Results', icon: BarChart3, roles: ['employee', 'manager', 'admin'] },
    { id: 'sales', label: 'Sales Performance', icon: TrendingUp, roles: ['manager', 'admin'] },
    { id: 'admin', label: 'Admin Panel', icon: Settings, roles: ['admin'] }
  ];

  const availableNavItems = navigation.filter(item => 
    item.roles.includes(currentUser.role)
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <h1 className="text-2xl font-bold text-gray-900">Skills Assessment Platform</h1>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">Welcome, {currentUser.name}</span>
              <div className="flex space-x-2">
                <button
                  onClick={() => setCurrentUser({ id: 1, name: 'John Doe', role: 'employee', managerId: 2 })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'employee' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Employee
                </button>
                <button
                  onClick={() => setCurrentUser({ id: 2, name: 'Sarah Wilson', role: 'manager', managerId: null })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'manager' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Manager
                </button>
                <button
                  onClick={() => setCurrentUser({ id: 4, name: 'Lisa Rodriguez', role: 'admin', managerId: null })}
                  className={`px-3 py-1 text-xs rounded ${currentUser.role === 'admin' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Admin
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <nav className="flex space-x-8 mb-8">
          {availableNavItems.map(item => {
            const Icon = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`flex items-center px-3 py-2 text-sm font-medium rounded-md ${
                  activeTab === item.id
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                }`}
              >
                <Icon className="w-4 h-4 mr-2" />
                {item.label}
              </button>
            );
          })}
        </nav>

        {/* Content */}
        {activeTab === 'assessment' && <AssessmentForm />}
        {activeTab === 'results' && <ResultsView />}
        {activeTab === 'sales' && (currentUser.role === 'manager' || currentUser.role === 'admin') && <SalesPerformanceView />}
        {activeTab === 'admin' && currentUser.role === 'admin' && <AdminPanel />}
      </div>
    </div>
  );
};

export default SkillsAssessmentApp;
